SonicPi:

*
live_loop :amen_break do
  use_bpm 40.6
  with_fx :slicer, phase: 0.125, wave: 0, mix: 0 do ##! A smaller value like 0.125 will slicer faster and larger values like 0.5 will slice more slowly. Notice that successively halving or doubling the phase: opt value tends to always sound good.
    sample :loop_amen, beat_stretch: 2, cutoff: 100
  end
  sleep 2
end

https://www.raspberrypi.org/magpi/sonic-pi-coded-beats/
*

sample :ambi_glass_hum
sample :ambi_haunted_hum
sample :ambi_piano

sample :bass_dnb_f
sample :bass_hit_c

sample :bd_klub

sample :drum_cymbal_closed
sample :drum_cymbal_pedal
sample :drum_heavy_kick

sample :elec_blip
sample :elec_blip2
sample :elec_plip
sample :elec_soft_kick
sample :elec_twip
sample :elec_wood

sample :perc_bell
sample :perc_snap (tem o snap2 tb)
sample :perc_swash
sample :perc_till

sample :guit_e_fifths (guitarra para ter som de corda)
sample :guit_e_slide
sample :guit_em9 
sample :guit_harmonics

sample :misc_cineboom
sample :misc_crow








SuperCollider:

{Saw.ar(freq:MouseX.kr(minval:10, maxval:300), mul:1)}.play

//osciladores
{SinOsc.ar(freq:400, mul:0.1)}.play //forma de onda senoidal
{Pulse.ar(freq:400, mul:0.1)}.play  //forma de onda quadrada
{Saw.ar(freq:400, mul:0.1)}.play    //I wanna play a game...
{LFTri.ar(freq:400, mul:0.1)}.play  //forma de onda triangular

//geradores de ruído
{WhiteNoise.ar(mul:0.2)}.play
{PinkNoise.ar(mul:0.2)}.play
{BrownNoise.ar(mul:0.2)}.play

//funções podem ser argumentos de outras funções!
rrand(200, 300) //gera um número entre 200 e 300

// Low Pass Filter
{LPF.ar(in:WhiteNoise.ar(0.4), freq:MouseX.kr(200, 15000))!2}.play;

// High Pass Filter
{HPF.ar(in:WhiteNoise.ar(0.4), freq:MouseX.kr(200, 15000))!2}.play;

(
{


}.freqscope
)


